{"version":3,"sources":["components/Contact.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Contact","_this$props","this","props","name","email","phone","react_default","a","createElement","className","Component","Header","branding","href","defaultProps","App","components_Header","components_Contact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LA2BeA,gMAtBJ,IAAAC,EAEwBC,KAAKC,MAA5BC,EAFDH,EAECG,KAAMC,EAFPJ,EAEOI,MAAOC,EAFdL,EAEcK,MACrB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,WAAyCL,GACzCE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,WAAyCJ,YAT7BK,cCAhBC,EAAS,SAAAT,GAAS,IAEdU,EAAaV,EAAbU,SACR,OACEN,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4DACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGK,KAAK,IAAIJ,UAAU,gBACnBG,GAEHN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGK,KAAK,IAAIJ,UAAU,YAAtB,eAahBE,EAAOG,aAAe,CACpBF,SAAU,UAQGD,QCZAI,mLApBX,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACQ,EAAD,CAAQJ,SAAS,oBACjBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACS,EAAD,CACEd,KAAK,WACLC,MAAM,iBACNC,MAAM,iBAERC,EAAAC,EAAAC,cAACS,EAAD,CACEd,KAAK,aACLC,MAAM,kBACNC,MAAM,0BAdAK,aCMEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.02a8aad4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// to support Typechecking thnaks to PropTypes\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Contact extends Component {\r\n  render() {\r\n    // DESTRUCTURING CONST is used to get rid of this.props inside {this.props.name}, {this.props.email}, {this.props.phone}\r\n    const { name, email, phone } = this.props;\r\n    return (\r\n      <div className=\"card card-body mb-3\">\r\n        <h4>{name}</h4>\r\n        <ul className=\"list-group\">\r\n          <li className=\"list-group-item\">Email : {email}</li>\r\n          <li className=\"list-group-item\">Phone : {phone}</li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// check if the prop passed in the contact is a string, if not shows an error in the console.\r\nContact.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  phone: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Contact;\r\n","import React from \"react\";\r\n// to support Typechecking thnaks to PropTypes\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Header = props => {\r\n  // DESTRUCTURING CONST is used to get rid of props inside \"props.branding\"\r\n  const { branding } = props;\r\n  return (\r\n    <div>\r\n      {/* Boostrap navbar */}\r\n      <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-3 py-0\">\r\n        <div className=\"container\">\r\n          <a href=\"/\" className=\"navbar-brand\">\r\n            {branding}\r\n          </a>\r\n          <div>\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item\">\r\n                <a href=\"/\" className=\"nav-link\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\n// default info to be displayed if there is no props passed in\r\nHeader.defaultProps = {\r\n  branding: \"My App\"\r\n};\r\n\r\n// check if the prop passed in the header is a string, if not shows an error in the console.\r\nHeader.propTypes = {\r\n  branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Contact from \"./components/Contact\";\nimport Header from \"./components/Header\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header branding=\"Contact Manager\" />\n        <div className=\"container\">\n          <Contact\n            name=\"John Doe\"\n            email=\"jdoe@gmail.com\"\n            phone=\"555-555-5555\"\n          />\n          <Contact\n            name=\"Karen Mill\"\n            email=\"kmill@gmail.com\"\n            phone=\"444-555-5555\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}